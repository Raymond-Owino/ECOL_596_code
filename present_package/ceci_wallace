---
title: "Wallace-package"
author: "Cecilia Martinez"
date: "2023-12-12"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load necessary packages

Note: this package has lots of dependencies

```{r cars, echo=FALSE}

library(wallace)

```

## Launch the wallace package 

Wallace is a shiny app and will take you to a web browser page after you run it, and from there it's just point and click!

```{r pressure, echo=FALSE}

run_wallace()

```

## Below is the code produced from the tutorial building a sdm using bioclim for whitebark pine (Pinus albicaulis) using the Wallace shiny app

### Package installation

Wallace uses the following R packages that must be installed and loaded
before starting.

```{r}
library(spocc)
library(spThin)
library(dismo)
library(sf)
library(ENMeval)
library(wallace)
```

------------------------------------------------------------------------

## Analysis for *Pinus albicaulis* (Pa)

### Obtain Occurrence Data

You searched the gbif database for *Pinus albicaulis*, limited to 100
records. You decided to remove occurrences without uncertainty
information? FALSE

```{r}
# Query selected database for occurrence records
queryDb_Pa <- occs_queryDb(
  spNames = "Pinus albicaulis", 
  occDb = "gbif", 
  occNum = 100,
  RmUncertain = FALSE)
occs_Pa <- queryDb_Pa$Pinus_albicaulis$cleaned
```

### Obtain environmental data

Using WorldClim (<http://www.worldclim.org/>) bioclimatic dataset at
resolution of 2.5 arcmin.

```{r}
# Download environmental data 
envs_Pa <- envs_worldclim(
  bcRes = 2.5, 
  bcSel = c('bio01', 'bio02', 'bio03', 'bio04', 'bio05', 'bio06', 'bio07', 'bio08', 'bio09', 'bio10', 'bio11', 'bio12', 'bio13', 'bio14', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19'), 
  mapCntr = c(-119.332, 48.097), # Mandatory for 30 arcsec resolution   
  doBrick = FALSE)
occs_xy_Pa <- occs_Pa[c('longitude', 'latitude')]
occs_vals_Pa <- as.data.frame(raster::extract(envs_Pa, occs_xy_Pa, cellnumbers = TRUE))
# Remove duplicated same cell values
occs_Pa <- occs_Pa[!duplicated(occs_vals_Pa[, 1]), ]
occs_vals_Pa <- occs_vals_Pa[!duplicated(occs_vals_Pa[, 1]), -1]
# remove occurrence records with NA environmental values
occs_Pa <- occs_Pa[!(rowSums(is.na(occs_vals_Pa)) >= 1), ]
# also remove variable value rows with NA environmental values
occs_vals_Pa <- na.omit(occs_vals_Pa)
# add columns for env variable values for each occurrence record
occs_Pa <- cbind(occs_Pa, occs_vals_Pa)
```

### Process environmental data

Sampling of 10000 background points and corresponding environmental data
using a “minimum convex polygon” method with a 1 degree buffer.

```{r}
# Generate background extent 
bgExt_Pa <- penvs_bgExtent(
  occs = occs_Pa,
  bgSel = "minimum convex polygon",
  bgBuf = 1)
# Mask environmental data to provided extent
bgMask_Pa <- penvs_bgMask(
  occs = occs_Pa,
  envs = envs_Pa,
  bgExt = bgExt_Pa)
# Sample background points from the provided area
bgSample_Pa <- penvs_bgSample(
  occs = occs_Pa,
  bgMask =  bgMask_Pa,
  bgPtsNum = 10000)
# Extract values of environmental layers for each background point
bgEnvsVals_Pa <- as.data.frame(raster::extract(bgMask_Pa,  bgSample_Pa))
##Add extracted values to background points table
bgEnvsVals_Pa <- cbind(scientific_name = paste0("bg_", "Pinus albicaulis"), bgSample_Pa,
                            occID = NA, year = NA, institution_code = NA, country = NA,
                            state_province = NA, locality = NA, elevation = NA,
                            record_type = NA, bgEnvsVals_Pa)
```

### Partition occurrence data

Partition occurrences and background points for model training and
validation using random k-fold, a non-spatial partition method.

```{r}
# R code to get partitioned data
groups_Pa <- part_partitionOccs(
  occs = occs_Pa ,
  bg =  bgSample_Pa, 
  method = "rand",
  kfolds = 3) 
```

### Build and Evaluate Niche Model

Generating a species distribution model using the bioclim alogorithm as
implemented in ENMeval V2.0.

```{r}
# Run bioclim model for the selected species
model_Pa <- model_bioclim(
  occs =  occs_Pa,
  bg = bgEnvsVals_Pa, 
  user.grp = groups_Pa, 
  bgMsk = bgMask_Pa)
```

### Visualize

Generate a map of the Bioclim generated model with a “mtp” threshold
rule of 0.0163934426229508.

```{r}
# Select current model and obtain raster prediction
m_Pa <- model_Pa@models[["bioclim"]]
predSel_Pa <- dismo::predict(m_Pa, bgMask_Pa, useC = FALSE)
# extract the suitability values for all occurrences
occs_xy_Pa <- occs_Pa[c('longitude', 'latitude')]
# determine the threshold based on the current prediction
occPredVals_Pa <- raster::extract(predSel_Pa, occs_xy_Pa)
# Define probability of quantile based on selected threshold
thresProb_Pa <- switch("mtp", 
                              "mtp" = 0, "p10" = 0.1, "qtp" = 0)
# Define threshold value
thres_Pa <- stats::quantile(occPredVals_Pa, 
                                   probs = thresProb_Pa)
# Applied selected threshold
predSel_Pa <- predSel_Pa > thres_Pa
# Get values of prediction
mapPredVals_Pa <- getRasterVals(predSel_Pa, "BIOCLIM")
# Define colors and legend  
rasCols <- c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")
legendPal <- colorNumeric(rev(rasCols), mapPredVals_Pa, na.color = 'transparent')
rasPal <- c('gray', 'blue')
# Generate map
m <- leaflet() %>% addProviderTiles(providers$Esri.WorldTopoMap) 
m  %>%
 leaflet::addLegend("bottomright", colors = c('gray', 'blue'),
                title = "Thresholded Suitability<br>(Training)",
                labels = c("predicted absence", "predicted presence"),
                opacity = 1, layerId = "train") %>% 
  # add occurrence data
  addCircleMarkers(data = occs_Pa, lat = ~latitude, lng = ~longitude,
                   radius = 5, color = 'red', fill = TRUE, fillColor = "red",
                   fillOpacity = 0.2, weight = 2, popup = ~pop) %>% 
  ## Add model prediction
  addRasterImage(predSel_Pa, colors = rasPal, opacity = 0.7,
                 group = 'vis', layerId = 'mapPred', method = "ngb") %>%
 ##add background polygons
  addPolygons(data = bgExt_Pa,fill = FALSE,
              weight = 4, color = "blue", group = 'proj')
```

### Visualize

Visualize bivariate plot of bioclim model for environmental layers 1 & ,
2 and a percentile distribution of 0.85

```{r}
# Generate a bioclim plot 
vis_bioclimPlot_Pa <- vis_bioclimPlot(
  x = model_Pa@models$bioclim,
  a = 1,
  b = 2,
  p = 0.85)
```

### Transfer model

Transferring the model to a user drawn area with a “mtp” threshold rule
of 0.0163934426229508. New time based on “WorldClim 1.4” variables for
2070 using a “CC” GCM and an RCP of *8.5*.

```{r}
#Download variables for transferring 
xferTimeEnvs_Pa <- raster::getData(
  'CMIP5',
  var = "bio",
  res = round((raster::res(bgMask_Pa) * 60)[1],1),
  rcp = 85,
  model = "CC",
  year = 70)

names(xferTimeEnvs_Pa) <- paste0('bio', c(paste0('0',1:9), 10:19))
# Select variables for transferring to match variables used for modelling 
xferTimeEnvs_Pa <- xferTimeEnvs_Pa[[names(bgMask_Pa)]]

# Generate the area of transfer according to the drawn polygon in the GUI
xfer_draw_Pa <-xfer_draw(
  polyXfXY = matrix(c(-128.93486, -128.319626, -124.979782, -120.761032, -112.147751, -108.983688, -112.411423, -119.09111, -126.210251, -128.93486, 55.651636, 48.25257, 41.210172, 35.423189, 38.167495, 48.427834, 51.915897, 54.748802, 56.339759, 55.651636),ncol=2,byrow=FALSE),
  polyXfID = 2431,
  drawXfBuf = 1)

# Generate a transfer of the model to the desired area and time
xfer_time_Pa <-xfer_time(
  evalOut = model_Pa,
  curModel = "bioclim",
  envs = xferTimeEnvs_Pa,
  xfExt = xfer_draw_Pa,
  alg = "BIOCLIM",
  outputType = "BIOCLIM",
  clamp = 
 )

# store the cropped variables of transfer
xferExt_Pa <- xfer_time_Pa$xferExt
# extract the suitability values for all occurrences
occs_xy_Pa <- occs_Pa[c('longitude', 'latitude')]
# determine the threshold based on the current prediction
occPredVals_Pa <- raster::extract(predSel_Pa, occs_xy_Pa)
# Define probability of quantile based on selected threshold
xfer_thresProb_Pa <- switch("mtp", 
                                   "mtp" = 0, "p10" = 0.1, "qtp" = 0)
# Add threshold if specified 
xfer_time_Pa <- xfer_time_Pa$xferTime > xfer_thresProb_Pa

##Make map
###Make map of transfer
bb_Pa <-  bgExt_Pa@bbox
bbZoom <- polyZoom(bb_Pa[1, 1], bb_Pa[2, 1], bb_Pa[1, 2], 
                   bb_Pa[2, 2], fraction = 0.05)
mapXferVals_Pa <- getRasterVals(xfer_time_Pa,"BIOCLIM")

  # if threshold specified
rasPal_Pa <- c('gray', 'red')
m <- leaflet() %>% addProviderTiles(providers$Esri.WorldTopoMap) 
m %>%
  fitBounds(bbZoom[1], bbZoom[2], bbZoom[3], bbZoom[4]) %>%
  leaflet::addLegend("bottomright", colors = c('gray', 'red'),
            title = "Thresholded Suitability<br>(Transferred)",
            labels = c("predicted absence", "predicted presence"),
            opacity = 1, layerId = 'xfer') %>%
# map model prediction raster and polygon of transfer
  clearMarkers() %>% clearShapes() %>% removeImage('xferRas') %>%
  addRasterImage(xfer_time_Pa, colors = rasPal_Pa, opacity = 0.7,
                 layerId = 'xferRas', group = 'xfer', method = "ngb") %>%
 ##add polygon of transfer (user drawn area)
  addPolygons(data = xfer_draw_Pa, fill = FALSE,
              weight = 4, color = "blue", group = 'xfer')
```

